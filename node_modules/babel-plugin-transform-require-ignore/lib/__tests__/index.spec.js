'use strict';

var _ava = require('ava');

var _babelCore = require('babel-core');

var babel = _interopRequireWildcard(_babelCore);

var _ = require('../.');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function trimLines(str) {
  return str.replace(/^\n+|\n+$/, '').replace(/\n+/g, '\n');
}

var babelAssign = function babelAssign() {
  var babelOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (t, expected, input) {
    var code = babel.transform(input, babelOptions).code;
    t.is(trimLines(code), trimLines(babel.transform(expected, babelOptions).code));
  };
};

var babelThrow = function babelThrow() {
  var babelOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (t, input, msg) {
    var error = t.throws(function () {
      babel.transform(input, babelOptions);
    });
    t.true(error.toString().includes(msg));
  };
};

var simpleBabelAssign = babelAssign({
  plugins: [[_2.default, {
    extensions: ['.css', '.less', 'sass']
  }]]
});

var withES2015BabelAssign = babelAssign({
  presets: ['es2015'],
  plugins: [[_2.default, {
    extensions: ['.less', 'sass']
  }]]
});

var simpleBabelThrow = babelThrow({
  plugins: [[_2.default, {
    extensions: ['.less', 'sass']
  }]]
});

(0, _ava.test)('should remove require call expression by extensions', simpleBabelAssign, '\nrequire(\'babel\');\n', '\nrequire(\'./index.css\');\nrequire(\'./index.less\');\nrequire(\'./index.sass\');\nrequire(\'babel\');\n');

(0, _ava.test)('should remove import call expression by extensions', simpleBabelAssign, '\nimport \'./index.less\';\nimport \'./index.css\';\nimport * as babel from \'babel\';', '\nimport * as babel from \'babel\';\n');

(0, _ava.test)('should not process when remove require call expression in assignment expression', simpleBabelThrow, '\nvar { a } = require(\'./index.less\');\nrequire(\'babel\');\n', './index.less should not be assigned to variable.');

(0, _ava.test)('should not process when remove import expression in default imports', simpleBabelThrow, '\nimport myCss from \'./index.less\';\nimport * as babel from \'babel\';\n', './index.less should not be imported using default imports.');

(0, _ava.test)('should not process when remove import expression in named imports', simpleBabelThrow, '\nimport { myCss } from \'./index.less\';\nimport * as babel from \'babel\';\n', './index.less should not be imported using named imports.');

(0, _ava.test)('should not process when remove import expression in namespace imports', simpleBabelThrow, '\nimport * as myCss from \'./index.less\';\nimport * as babel from \'babel\';\n', './index.less should not be imported using namespace imports.');

(0, _ava.test)('should remove require call expression in other block', simpleBabelAssign, '\n(function (){\n  require(\'./index.sass\');\n  require(\'./index.less\');\n  require(\'babel\');\n})();\n', '\n(function (){\n  require(\'babel\');\n})();\n');

(0, _ava.test)('should remove require call expression', withES2015BabelAssign, '\n  require(\'./index.sass\');\n  require(\'babel\');\n', '\n  require(\'babel\');\n');

(0, _ava.test)('should remove require call expression after import transformed', withES2015BabelAssign, '\n  import \'./index.less\';\n  import * as babel from \'babel\';\n', '\n  import * as babel from \'babel\';\n');